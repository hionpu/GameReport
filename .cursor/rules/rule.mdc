---
alwaysApply: true
---
# Language Rule - English Only
- ALL content must be in English: explanations, code comments, strings, variable names, and function names
- Even if source documents contain Korean, generate ALL code and responses in English only
- Exception: Only use Korean if user explicitly requests Korean explanation with specific instruction
- This applies to:
  - Code comments (// comments)
  - String literals ("text content")
  - Variable and function names
  - Log messages and error messages
  - API responses and templates

# Even if there is document that contains Korean, response should be always in English unless there is instruction that user want Korean explanation.
# Default behavior: Clean code generation without extra explanations
# Only add context when specific keywords are used =============================================================================
# =============================================================================
# CONTEXT-AWARE CODE GENERATION RULES
# =============================================================================

# Rule activation keywords:
# !explain - Include detailed explanation for context when generate code
# !flow - Process Flow and Call Relationship Explanation
# !arch - File/Structure Explanation from an Architectural Perspective
# !learn - Learning-Oriented Detailed Explanation

## When user types !explain
When "!explain" is mentioned, include detailed explanations:
- File's role in overall project architecture
- Purpose and responsibility of each struct/interface
- Business logic intent behind each function
- Integration points with other components
- Add comprehensive Korean comments above each code block

## When user types !flow  
When "!flow" is mentioned, show process flow:
- Execution sequence (A → B → C → D)
- Data flow through the system
- Error handling paths
- Include ASCII diagrams for complex flows
- Show where each function gets called from

## When user types !arch
When "!arch" is mentioned, provide architecture context:
- Layer position (controller/service/repository/model)
- Dependencies and relationships with other files
- Design patterns being used
- Why this structure was chosen
- Connection to overall system design

## When user types !learn
When "!learn" is mentioned, focus on educational aspects:
- Explain Go language patterns and conventions
- Compare different approaches and why this one was chosen
- Point out common pitfalls and best practices
- Include "Big Picture" summary at the top
- Add learning objectives for each code section

## When user types #all
When "!all" is mentioned, it is same as mentioning "!explain !flow !arch !learn" altogether.
