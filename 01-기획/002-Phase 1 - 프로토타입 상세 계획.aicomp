H1:Phase_1:_프로토타입_상세_계획_(2주)|##_🎯_Phase_1_목표 기본 동작하는 데모 완성:`TenZ#NA1` 검색하면 통계 + AI 조언이 나오는 데모|---|## 📅 Week 1:백엔드 기본 구조|### Day 1-2:프로젝트 초기화 + Chi 라우터 설정|#### Day 1 작업 프로젝트 구조 설정,``` valorant-ai-platform/ ├── cmd/server/ │ └── main.go ├── internal/ │ ├── handlers/ │ ├── models/ │ └── services/ ├── pkg/ │ └── utils/ ├── go.mod └── README.md ``` Go 모듈 초기화:`go mod init valorant-ai-platform`,기본 의존성 설치:Chi 라우터,환경변수,로깅,환경 설정:`.env` 파일,설정 구조체 정의,기본 HTTP 서버:Chi 라우터로 기본 서버 구동|#### Day 2 작업,라우터 구조 설계:API 엔드포인트 계층 구조,미들웨어 설정:로깅,CORS,에러 핸들링,헬스체크 엔드포인트:`/health` API 구현,기본 응답 구조:JSON 응답 표준화,로깅 시스템:구조화된 로그 출력|### Day 3-4:Riot API 클라이언트 구현|#### Day 3 작업,Riot API 클라이언트 구조체 설계,```go type RiotClient struct { APIKey string BaseURL string HTTPClient *http.Client } ``` API 키 관리:환경변수에서 안전하게 로드,HTTP 클라이언트 설정:타임아웃,재시도 로직,레이트 리미팅 기본 구조:요청 간격 제어,에러 처리:Riot API 에러 코드 매핑|#### Day 4 작업,플레이어 검색 API:Account-v1 API 구현,플레이어 정보 조회:Account by RiotID,기본 데이터 구조체:Player,Account 모델,API 응답 파싱:JSON 언마샬링,테스트 케이스:실제 플레이어로 테스트|### Day 5-7:플레이어 검색 + 기본 통계 API|#### Day 5 작업,매치 히스토리 API:Match-v1 API 구현,최근 매치 목록:최근 10경기 조회,매치 상세 정보:개별 매치 데이터 파싱,통계 계산 로직:승률,평균 킬/데스/어시스트,데이터 구조체:Match,MatchStats 모델|#### Day 6 작업,HTTP 핸들러 구현:`/api/player/{gameName}/{tagLine}` 엔드포인트,플레이어 통계 집계:여러 매치 데이터 종합,에이전트별 통계:에이전트 사용률,승률,맵별 통계:맵별 성과 분석,JSON 응답:구조화된 통계 데이터 반환|#### Day 7 작업,에러 처리 강화:존재하지 않는 플레이어,API 오류,로깅 개선:요청 추적,성능 로깅,기본 캐싱:메모리 기반 간단 캐싱,API 테스트:Postman/curl로 엔드포인트 검증,코드 정리:리팩토링,주석 추가|---|## 📅 Week 2:AI 통합 + 간단한 UI|### Day 8-10:AI API 연동 + 인사이트 생성|#### Day 8 작업,AI 클라이언트 설계:OpenAI 또는 Claude API 클라이언트,프롬프트 엔지니어링:게임 통계 기반 조언 프롬프트,API 키 관리:AI 서비스 인증 설정,기본 프롬프트 템플릿:플레이어 성과 분석 템플릿,AI 응답 파싱:구조화된 인사이트 추출|#### Day 9 작업,통계-인사이트 연결:게임 통계를 AI 프롬프트로 변환,인사이트 카테고리:개선점,강점,에이전트 추천,프롬프트 최적화:더 정확하고 유용한 조언 생성,에러 처리:AI API 오류,응답 검증,응답 캐싱:동일 플레이어 중복 요청 방지|#### Day 10 작업,AI 인사이트 API:`/api/insights/{gameName}/{tagLine}` 엔드포인트,통합 API:통계 + 인사이트 한 번에 조회,성능 최적화:병렬 처리,응답 시간 단축,테스트:다양한 플레이어 프로필로 검증,로깅:AI 요청/응답 추적|### Day 11-14:HTML + JS 간단한 웹페이지|#### Day 11 작업,정적 파일 서빙:Chi 라우터로 HTML/CSS/JS 제공,기본 HTML 구조:검색 폼,결과 표시 영역,CSS 스타일링:간단하고 깔끔한 디자인,반응형 레이아웃:모바일 친화적 기본 구조,폰트/아이콘:게임 테마에 맞는 시각적 요소|#### Day 12 작업,JS 기능:검색 폼 이벤트 처리,API 호출:Fetch API로 백엔드 연동,동적 콘텐츠:검색 결과 동적 렌더링,로딩 상태:검색 중 로딩 인디케이터,에러 표시:사용자 친화적 에러 메시지|#### Day 13 작업,통계 시각화:차트.js로 기본 차트 구현,승률 차트:도넛 차트로 승률 표시,에이전트 사용률:바 차트로 에이전트별 통계,최근 성과:라인 차트로 성과 추이,인사이트 표시:카드 형태로 AI 조언 배치|#### Day 14 작업,UI/UX 개선:사용자 경험 최적화,검색 기록:로컬스토리지로 최근 검색 저장,즐겨찾기:자주 찾는 플레이어 저장,공유 기능:URL 공유로 결과 공유,최종 테스트:전체 플로우 검증 및 버그 수정|---|## 🎯 완성 기준 (Definition of Done)|### 기능적 완성 기준,[ ] 플레이어 검색 (`TenZ#NA1`) 정상 동작,[ ] 기본 통계 (승률,KDA,에이전트별 성과) 표시,[ ] AI 기반 개인화 인사이트 생성,[ ] 웹 인터페이스를 통한 사용자 상호작용,[ ] 모바일에서도 기본적인 사용 가능|### 기술적 완성 기준,[ ] Go 백엔드 서버 안정적 구동,[ ] Riot API 연동 및 데이터 파싱,[ ] AI API 연동 및 인사이트 생성,[ ] 기본적인 에러 처리 및 로깅,[ ] 간단한 캐싱으로 성능 최적화|### 품질 기준,[ ] 평균 응답 시간 3초 이내,[ ] 일반적인 오류 상황 적절히 처리,[ ] 코드 주석 및 README 문서화,[ ] Git 커밋 히스토리 정리,[ ] 기본적인 보안 고려사항 적용|---|## 🛠️ 사용할 기술 스택|### 백엔드,언어:Go 1.21+,라우터:Chi v5,HTTP 클라이언트:표준 라이브러리 `net/http`,JSON 처리:표준 라이브러리 `encoding/json`,환경 설정:`godotenv` 패키지|### 프론트엔드,HTML5:시맨틱 마크업,CSS3:Flexbox/Grid 레이아웃,Vanilla JS:ES6+ 문법,Chart.js:기본 차트 라이브러리,Fetch API:HTTP 요청|### 외부 서비스,Riot Games API:플레이어 및 매치 데이터,OpenAI API 또는 Claude API:AI 인사이트 생성|---|## 📋 일일 체크리스트 예시|### Day 1 체크리스트,[ ] Go 프로젝트 초기화 (`go mod init`),[ ] 디렉터리 구조 생성,[ ] Chi 라우터 의존성 설치,[ ] 기본 HTTP 서버 구동 확인,[ ] 환경변수 설정 구조 구현,[ ] Git 저장소 초기화 및 첫 커밋|### Day 7 체크리스트,[ ] 플레이어 검색 API 완성,[ ] 기본 통계 계산 로직 구현,[ ] JSON 응답 포맷 표준화,[ ] 에러 처리 케이스 구현,[ ] Postman으로 API 테스트 완료,[ ] 코드 리뷰 및 리팩토링|### Day 14 체크리스트 (최종),[ ] `TenZ#NA1` 검색 → 통계 + AI 조언 표시 확인,[ ] 웹페이지 모든 기능 정상 동작,[ ] 모바일 브라우저에서 테스트 완료,[ ] 에러 케이스 사용자 친화적 처리,[ ] README 문서 작성 완료,[ ] 데모 영상 또는 스크린샷 준비|---|🚀_다음_단계_(Phase_2_준비:Phase 1 완료 후 Phase 2 MVP 개발을 위해 준비할 사항:- PostgreSQL 스키마 설계,Next.js 프론트엔드 아키텍처 계획,데이터베이스 연동 구조 설계,사용자 인터페이스 개선 계획,성능 최적화 포인트 파악|---,Last updated:2025-06-13